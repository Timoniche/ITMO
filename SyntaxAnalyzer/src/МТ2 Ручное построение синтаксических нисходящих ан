http://neerc.ifmo.ru/~sta/2019-2020/3-parsing/02-recursive-parsing.pdf

МТ2 Ручное построение синтаксических нисходящих анализаторов
______________________________________________________________
Вариант 3. Логические формулы в стиле Паскаля
Логические формулы. Используются операции and, or, xor, not. Приоритет операций стандартный. Скобки могут использоваться для изменения приоритета.
В качестве операндов выступают переменные с именем из одной буквы. Используйте один терминал для всех переменных. Для каждой логической операции должен быть заведен один терминал (не три ‘a’, ‘n’,
‘d’ для and).
Пример: (a and b) or not (c xor (a or not b))
______________________________________________________________
1. Построим грамматику

Priority:
Not
And
Xor
Or

Модификация:
Priority:
Not
And
Xor | Or

S -> S or A | A
A -> A xor B | B
B -> B and C | C
C -> not D | D
D -> var | ( S )

В грамматике есть левая рекурсия. Устраним ее:
https://neerc.ifmo.ru/wiki/index.php?title=%D0%A3%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BB%D0%B5%D0%B2%D0%BE%D0%B9_%D1%80%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D0%B8
S -> A S' 
S'-> or A S'| ε
A -> B A'
A'-> xor B A'| ε
B -> C B'
B'-> and C B'| ε
C -> not D | D
D -> var | ( S )
' - продолжение выражения

Модификация
S -> A S'
////S'-> [or | xor] A S'| ε
S'-> [BINOP] B S'| ε
////A -> B A'
////A'-> [or | xor] B A'| ε
B -> C B'
B'-> and C B'| ε
C -> not D | D
D -> var | ( S )
' - продолжение выражения

______________________________________________________________

2. Построение лексического анализатора см. LexicalAnalyzer.java
3. Построение синтаксического анализатора
   Построим множества FIRST & FOLLOW https://mikedevice.github.io/first-follow/
   FIRST
   S --- not, var, (
   S'--- or, ε
   A --- not, var, (
   A'--- xor, ε
   B --- not, var, (
   B'--- and, ε
   C --- not, var, (
   D --- var, (
   FOLLOW
   S --- $, )
   S'--- $, )
   A --- or, $, )
   A'--- or, $, )
   B --- xor, or, $, )
   B'--- xor, or, $, )
   C --- and, xor, or, $, )
   D --- and, xor, or, $, )

   Tree.java - структура данных для хранения дерева
   Parser.java - синтаксический анализатор с использованием рекурсивного спуска

4. Визуализация дерева разбора (Tree.java)
5. Набор тестов (Main.java)